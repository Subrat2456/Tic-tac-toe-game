<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .game-container {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 100%;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h1 {
            text-align: center;
            color: #667eea;
            margin-bottom: 20px;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .score-board {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            border-radius: 15px;
        }

        .score {
            text-align: center;
        }

        .score h3 {
            color: #667eea;
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .score p {
            font-size: 2rem;
            font-weight: bold;
            color: #764ba2;
        }

        .player-x {
            color: #e74c3c;
        }

        .player-o {
            color: #3498db;
        }

        .game-info {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.3rem;
            font-weight: bold;
            color: #667eea;
            min-height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .game-info.winner {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.1);
            }
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-bottom: 30px;
            aspect-ratio: 1;
        }

        .cell {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            border: none;
            border-radius: 10px;
            font-size: 3rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .cell:hover:not(.taken) {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transform: scale(1.05);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        .cell.taken {
            cursor: not-allowed;
        }

        .cell.x {
            color: #e74c3c;
            animation: popIn 0.3s ease-out;
        }

        .cell.o {
            color: #3498db;
            animation: popIn 0.3s ease-out;
        }

        @keyframes popIn {
            0% {
                transform: scale(0);
            }
            50% {
                transform: scale(1.2);
            }
            100% {
                transform: scale(1);
            }
        }

        .cell.winning {
            background: linear-gradient(135deg, #f39c12 0%, #e74c3c 100%);
            color: white;
            animation: winningCell 0.6s ease-in-out;
        }

        @keyframes winningCell {
            0%, 100% {
                transform: scale(1);
            }
            25% {
                transform: scale(1.1) rotate(5deg);
            }
            75% {
                transform: scale(1.1) rotate(-5deg);
            }
        }

        .controls {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .btn {
            padding: 12px 30px;
            font-size: 1rem;
            font-weight: bold;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            flex: 1;
            min-width: 120px;
        }

        .btn-reset {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-reset:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        .btn-clear {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
        }

        .btn-clear:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            h1 {
                font-size: 2rem;
            }

            .score h3 {
                font-size: 1rem;
            }

            .score p {
                font-size: 1.5rem;
            }

            .cell {
                font-size: 2rem;
            }

            .game-info {
                font-size: 1.1rem;
            }

            .btn {
                font-size: 0.9rem;
                padding: 10px 20px;
            }
        }

        @media (max-width: 400px) {
            .game-container {
                padding: 20px;
            }

            h1 {
                font-size: 1.5rem;
            }

            .cell {
                font-size: 1.5rem;
            }

            .score-board {
                padding: 15px;
            }
        }

        /* Dark mode toggle (optional enhancement) */
        .mode-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .mode-toggle:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>🎮 Tic Tac Toe</h1>
        
        <div class="score-board">
            <div class="score">
                <h3>Player X</h3>
                <p class="player-x" id="scoreX">0</p>
            </div>
            <div class="score">
                <h3>Draws</h3>
                <p id="scoreDraw">0</p>
            </div>
            <div class="score">
                <h3>Player O</h3>
                <p class="player-o" id="scoreO">0</p>
            </div>
        </div>

        <div class="game-info" id="gameInfo">Player X's Turn</div>

        <div class="board" id="board">
            <button class="cell" data-index="0"></button>
            <button class="cell" data-index="1"></button>
            <button class="cell" data-index="2"></button>
            <button class="cell" data-index="3"></button>
            <button class="cell" data-index="4"></button>
            <button class="cell" data-index="5"></button>
            <button class="cell" data-index="6"></button>
            <button class="cell" data-index="7"></button>
            <button class="cell" data-index="8"></button>
        </div>

        <div class="controls">
            <button class="btn btn-reset" id="resetBtn">Reset Game</button>
            <button class="btn btn-clear" id="clearScoreBtn">Clear Scores</button>
        </div>
    </div>

    <script>
        // Game State
        let currentPlayer = 'X';
        let gameBoard = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;
        let scores = {
            X: 0,
            O: 0,
            draw: 0
        };

        // Winning combinations
        const winningCombinations = [
            [0, 1, 2], // Top row
            [3, 4, 5], // Middle row
            [6, 7, 8], // Bottom row
            [0, 3, 6], // Left column
            [1, 4, 7], // Middle column
            [2, 5, 8], // Right column
            [0, 4, 8], // Diagonal top-left to bottom-right
            [2, 4, 6]  // Diagonal top-right to bottom-left
        ];

        // Sound Effects using Web Audio API
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();

        // Create sound effect for move
        function playMoveSound() {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = 400;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.1);
        }

        // Create sound effect for win
        function playWinSound() {
            const notes = [523.25, 659.25, 783.99]; // C, E, G (major chord)
            
            notes.forEach((freq, index) => {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.value = freq;
                oscillator.type = 'sine';
                
                const startTime = audioContext.currentTime + (index * 0.1);
                gainNode.gain.setValueAtTime(0.2, startTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, startTime + 0.5);
                
                oscillator.start(startTime);
                oscillator.stop(startTime + 0.5);
            });
        }

        // Create sound effect for draw
        function playDrawSound() {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(300, audioContext.currentTime);
            oscillator.frequency.exponentialRampToValueAtTime(200, audioContext.currentTime + 0.3);
            oscillator.type = 'triangle';
            
            gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.3);
        }

        // Create sound effect for reset
        function playResetSound() {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = 600;
            oscillator.type = 'square';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.15);
        }

        // DOM Elements
        const cells = document.querySelectorAll('.cell');
        const gameInfo = document.getElementById('gameInfo');
        const resetBtn = document.getElementById('resetBtn');
        const clearScoreBtn = document.getElementById('clearScoreBtn');
        const scoreXElement = document.getElementById('scoreX');
        const scoreOElement = document.getElementById('scoreO');
        const scoreDrawElement = document.getElementById('scoreDraw');

        // Load scores from localStorage
        function loadScores() {
            const savedScores = localStorage.getItem('tictactoeScores');
            if (savedScores) {
                scores = JSON.parse(savedScores);
                updateScoreDisplay();
            }
        }

        // Save scores to localStorage
        function saveScores() {
            localStorage.setItem('tictactoeScores', JSON.stringify(scores));
        }

        // Update score display
        function updateScoreDisplay() {
            scoreXElement.textContent = scores.X;
            scoreOElement.textContent = scores.O;
            scoreDrawElement.textContent = scores.draw;
        }

        // Handle cell click
        function handleCellClick(e) {
            const cell = e.target;
            const index = cell.getAttribute('data-index');

            // Check if cell is already taken or game is not active
            if (gameBoard[index] !== '' || !gameActive) {
                return;
            }

            // Play move sound
            playMoveSound();

            // Update game board
            gameBoard[index] = currentPlayer;
            cell.textContent = currentPlayer;
            cell.classList.add(currentPlayer.toLowerCase());
            cell.classList.add('taken');

            // Check for winner or draw
            if (checkWinner()) {
                endGame(false);
            } else if (checkDraw()) {
                endGame(true);
            } else {
                // Switch player
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                updateGameInfo();
            }
        }

        // Check for winner
        function checkWinner() {
            for (let combination of winningCombinations) {
                const [a, b, c] = combination;
                if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
                    highlightWinningCells(combination);
                    return true;
                }
            }
            return false;
        }

        // Highlight winning cells
        function highlightWinningCells(combination) {
            combination.forEach(index => {
                cells[index].classList.add('winning');
            });
        }

        // Check for draw
        function checkDraw() {
            return gameBoard.every(cell => cell !== '');
        }

        // End game
        function endGame(isDraw) {
            gameActive = false;
            gameInfo.classList.add('winner');

            if (isDraw) {
                gameInfo.textContent = "It's a Draw! 🤝";
                scores.draw++;
                // Play draw sound
                playDrawSound();
            } else {
                gameInfo.textContent = `Player ${currentPlayer} Wins! 🎉`;
                scores[currentPlayer]++;
                // Play win sound
                playWinSound();
            }

            updateScoreDisplay();
            saveScores();

            // Auto reset after 3 seconds
            setTimeout(() => {
                resetGame();
            }, 3000);
        }

        // Update game info
        function updateGameInfo() {
            gameInfo.textContent = `Player ${currentPlayer}'s Turn`;
            gameInfo.classList.remove('winner');
        }

        // Reset game
        function resetGame() {
            currentPlayer = 'X';
            gameBoard = ['', '', '', '', '', '', '', '', ''];
            gameActive = true;

            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('x', 'o', 'taken', 'winning');
            });

            updateGameInfo();
            // Play reset sound
            playResetSound();
        }

        // Clear scores
        function clearScores() {
            if (confirm('Are you sure you want to clear all scores?')) {
                scores = {
                    X: 0,
                    O: 0,
                    draw: 0
                };
                updateScoreDisplay();
                saveScores();
                resetGame();
            }
        }

        // Event Listeners
        cells.forEach(cell => {
            cell.addEventListener('click', handleCellClick);
        });

        resetBtn.addEventListener('click', resetGame);
        clearScoreBtn.addEventListener('click', clearScores);

        // Initialize game
        loadScores();
        updateGameInfo();

        // Keyboard support (optional enhancement)
        document.addEventListener('keydown', (e) => {
            if (e.key === 'r' || e.key === 'R') {
                resetGame();
            }
        });

        // Add visual feedback for current player
        function updatePlayerHighlight() {
            const scoreBoard = document.querySelector('.score-board');
            scoreBoard.style.transition = 'all 0.3s ease';
        }

        // Prevent context menu on cells
        cells.forEach(cell => {
            cell.addEventListener('contextmenu', (e) => {
                e.preventDefault();
            });
        });
    </script>
</body>
</html>
